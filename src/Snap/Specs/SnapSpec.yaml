# snap-version: 1
# snap-template-type: microsoft .net

feeds:
  # All published snaps will be written to this feed.
  - name: myget.private
    source: https://api.myget.org/v3/F/myprivatemygetfeed/index.json 
    publishapikey: MYGET_PRIVATE_API_PUBLISH_KEY_ENVIRONMENT_VARIABLE
  # This feed will be embedded into all executables that has the "SnapAwareAttribute" defined.
  # You must create a separate myget feed that mirrors your private feed.
  - name: myget.public
    source: https://api.myget.org/v3/F/myprivatemygetfeed/index.json 

# A list of snaps that may be built and published.
snaps:
    -
        # Snap id has to match <PackageId> in the corresponding nuspec.
        id: demoapp
        # Current application version (semver v2)
        version: 1.0.0
        # The project to build (can either by .sln or .csproj)
        project: src/snap.crossplatform.demoapp/snap.crossplatform.demoapp.csproj
        # Build output folder (can be either relative or absolute)
        outputdir: build/$id$/$channel$/$version$ 
        # Each build target has to have a matching nuspec, e.g. nuspecs/demoapp/windows-fullframework-net461.nuspec
        nuspec: nuspecs/$id$/$osplatform_rid_and_framework$.nuspec	
        # The snap concept is similiar to Google Chrome. You have N channels and a release is promoted to the next
        # channel when a certain time period has elapsed. Its a hard requirement that you always publish to your "test" channel first.
        # You can choose your own channel name but the first channel is always considered to be the primary channel.
        # NB! Are you publishing a open-source application? Use "nuget.org" instead of "myget.private" / "myget.public"
        channels:
            # This is the primary channel. You cannot publish a release without first publishing to the #test channel.
            - { name: test, publish-feed: myget.private, update-feed: myget.public }
            # This is the second channel. A test release can be promoted from #test to #staging by executing "snap promote --id demoapp"
            - { name: staging, publish-feed: myget.private, update-feed: myget.public }
            # This is the third and final channel. A staging release can be promoted from #staging to #production by executing "snap promise --id demoapp"
            - { name: production, publish-feed: myget.private, update-feed: myget.public }
        # These commands are execute per target. Since this is a simple application
        # we do not have to specify custom build commands per target framework.
        commands: 
            # Runs before @build, @publish
            - { name: clean, exec: ["dotnet clean $outputdir$" ]}
            # Runs after a successfull @build
            - { name: beforebuild, exec: [] }
            # Runs after a successfull @clean
            - { name: build, exec: ["dotnet build -c Release -f $framework$ -r $rid$ -o $outputdir$"] }
            # Runs after successfull @build
            - { name: afterbuild, exec: [] }
            # Runs after a successfull @clean, $build
            - { name: beforepublish, exec: [] }
            # Runs after a successfull @clean, @build, @beforepublish
            - { name: publish, exec: ["dotnet publish -c Release -f $framework$ -r $rid$ -o $outputdir$"] }
            # Runs after a successfull @clean, $build, @beforepublish, @publish
            - { name: afterpublish,
                exec: [
                  "snap releasify $outputdir$", 
                  "snap push $outputdir$" ] 
              }
        # This application targets windows, linux and osx. 
        targets:
            - osplatform: windows,
              # A list of target frameworks that are supported on windows.
              targetframeworks: [
                { rid: net-x86, framework: net461 }, 
                { rid: net-x64, framework: net461 }, 
                { rid: win7-x86, framework: netcoreapp2.1 },
                { rid: win7-x64, framework: netcoreapp2.1 } 
              ]
              # A list of target frameworks that are supported on linux.
            - osplatform: linux,
              targetframeworks: [
                { rid: ubuntu.16.04-x64, framework: netcoreapp2.1 },
                { rid: ubuntu.18.04-x64, framework: netcoreapp2.1 },
                { rid: linux-x64, framework: netcoreapp2.1 } 
              ]	             
              # A list of target frameworks that are supported on osx.
            - osplatform: osx,
              targetframeworks: [
                { rid: osx.10.11-x64, framework: netcoreapp2.1 },
                { rid: osx.10.12-x64, framework: netcoreapp2.1 },
                { rid: osx-x64, framework: netcoreapp2.1 } 
              ]

