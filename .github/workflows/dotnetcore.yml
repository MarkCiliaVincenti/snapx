name: snapx

on: push

env:
  GITVERSION_VERSION: 5.3.4
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1 

jobs:

  unix:
    runs-on: ubuntu-latest
    outputs:
      SNAPX_VERSION: ${{ steps.set-version.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch all history for all tags and branches (gitversion requirement)
        run: | 
          git config remote.origin.url https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git fetch --prune --unshallow
          
      - name: Checkout submodules 
        run: git submodule update --init --recursive
         
      - name: Cache git lfs
        uses: actions/cache@v2
        with:
          path: .git/lfs
          key: .git/lfs
    
      - name: Pull lfs data
        run: |
          git lfs pull
                  
      - name: Read dotnet sdk version from global.json
        shell: pwsh
        run: |
          $DOTNET_VERSION = Get-Content ".\$GITHUB_WORKSPACE\global.json" | ConvertFrom-Json | Select-Object -Expand sdk | Select-Object -Expand version    
          echo "::set-env name=DOTNET_VERSION::$DOTNET_VERSION"
          
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1.4.0
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - id: set-version
        name: Setup GitVersion and set build version
        shell: pwsh
        run: |
          dotnet tool update GitVersion.Tool --global --version ${{ env.GITVERSION_VERSION }}
          $SNAPX_VERSION = (dotnet gitversion /showVariable NugetVersionv2) | out-string
          echo "::set-env name=SNAPX_VERSION::$SNAPX_VERSION"
          echo "::set-output name=SNAPX_VERSION::$SNAPX_VERSION"
          
      - name: Install build dependencies
        run: |
          sudo apt-get update 
          sudo apt-get install -y --no-install-recommends cmake make gcc g++ mingw-w64 g++-mingw-w64-x86-64 g++-mingw-w64-i686 uuid-dev
          
      - name: Build & Run Tests
        run:  
          pwsh -command ".\${{ env.GITHUB_WORKSPACE }}\build.ps1" -Target Bootstrap-CI-Unix -CIBuild "1" -Version ${{ env.SNAPX_VERSION }}
    
      - name: Collect artifacts
        env:
          SNAPX_UNIX_SETUP_LINUX_X64_ZIP_REL_DIR: build/dotnet/linux-x64/Snap.Installer/netcoreapp3.1/Release/publish
          SNAPX_UNIX_CORERUN_REL_DIR: build/native/Unix/x86_64-linux-gcc/Release/Snap.CoreRun
          SNAPX_UNIX_PAL_REL_DIR: build/native/Unix/x86_64-linux-gcc/Release/Snap.CoreRun.Pal
          SNAPX_MINGW_CORERUN_REL_DIR: build/native/Unix/x86_64-w64-mingw32-gcc/Release/Snap.CoreRun
          SNAPX_MINGW_PAL_REL_DIR: build/native/Unix/x86_64-w64-mingw32-gcc/Release/Snap.CoreRun.Pal
          SNAPX_MINGW_TESTS_REL_DIR: build/native/Unix/x86_64-w64-mingw32-gcc/Release/Snap.CoreRun.Tests
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_SETUP_LINUX_X64_ZIP_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_SETUP_LINUX_X64_ZIP_REL_DIR }}/Setup-linux-x64.zip ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_SETUP_LINUX_X64_ZIP_REL_DIR }}/Setup-linux-x64.zip

          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}/corerun ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}/corerun
          
          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_PAL_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_PAL_REL_DIR }}/libpal.so ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_PAL_REL_DIR }}/libpal.so
          
          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_CORERUN_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_CORERUN_REL_DIR }}/corerun.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_CORERUN_REL_DIR }}/corerun.exe

          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_PAL_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_PAL_REL_DIR }}/libpal.dll ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_PAL_REL_DIR }}/libpal.dll

          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun.exe
          cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun_demoapp.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun_demoapp.exe
          cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun_tests.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun_tests.exe

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: unix
          path: ${{ github.workspace }}/artifacts/**/*

  windows:
    runs-on: windows-latest
    needs: [unix]
    env:
      SNAPX_VERSION: ${{ needs.build-linux.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache git lfs
        uses: actions/cache@v2
        with:
          path: .git/lfs
          key: .git/lfs
    
      - name: Pull lfs data
        run: |
          git lfs pull

      - name: Checkout submodules 
        run: git submodule update --init --recursive
             
      - name: Read dotnet sdk version from global.json
        shell: pwsh
        run: |
          $DOTNET_VERSION = Get-Content ".\$GITHUB_WORKSPACE\global.json" | ConvertFrom-Json | Select-Object -Expand sdk | Select-Object -Expand version    
          echo "::set-env name=DOTNET_VERSION::$DOTNET_VERSION"
          
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1.4.0
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download unix artifacts
        uses: actions/download-artifact@v2
        with:
          name: unix
          path: ${{ github.workspace }}

      - name: Build & Run Tests
        run:  
          pwsh -command ".\${{ env.GITHUB_WORKSPACE }}\build.ps1" -Target Bootstrap-CI-Windows -CIBuild "1" -Version ${{ env.SNAPX_VERSION }}

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: nupkgs
          path: ${{ github.workspace }}/nupkgs/*.nupkg
            
  publish:
    runs-on: ubuntu-latest
    needs: [unix, windows]
    env:
      SNAPX_VERSION: ${{ needs.build-linux.outputs.SNAPX_VERSION }}
    steps:
      - name: Download nupkgs artifacts
        uses: actions/download-artifact@v2
        with:
          name: nupkgs
          path: ${{ github.workspace }}/nupkgs
            
      - name: Push nuget packages MyGet
        run: | 
          dotnet nuget push ${{ github.workspace }}/nupkgs/snapx.${{ env.SNAPX_VERSION }}.nupkg --source https://www.myget.org/F/youpark/api/v2/package --api-key ${{ secrets.FINTER_MYGET_API_KEY }}
          dotnet nuget push ${{ github.workspace }}/nupkgs/Snapx.Core.${{ env.SNAPX_VERSION }}.nupkg --source https://www.myget.org/F/youpark/api/v2/package --api-key ${{ secrets.FINTER_MYGET_API_KEY }}
          
      - name: Create github release tag
        if: github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.SNAPX_VERSION }}
          release_name: Release v${{ env.SNAPX_VERSION }}
          draft: true
          prerelease: false
