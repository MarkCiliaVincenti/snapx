name: snapx

on: push

env:
  GITVERSION_VERSION: 5.3.6
  MSVS_TOOLSET_VERSION: 16
  DOTNET_FRAMEWORK_VERSION: netcoreapp3.1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:

  setup:    
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      SNAPX_VERSION: ${{ steps.set-version.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
        
      - id: set-version
        name: Setup GitVersion and set build version
        shell: pwsh
        run: |
          dotnet tool update GitVersion.Tool --global --version ${{ env.GITVERSION_VERSION }}
          $SNAPX_VERSION = (dotnet gitversion /showVariable NugetVersionv2) | out-string
          echo "::set-env name=SNAPX_VERSION::$SNAPX_VERSION"
          echo "::set-output name=SNAPX_VERSION::$SNAPX_VERSION"
            
  linux:
    runs-on: ${{ matrix.os }}
    name: Bootstrap ${{ matrix.os }}-${{ matrix.rid }}-${{ matrix.configuration }}
    needs: [setup]
    strategy:
      matrix:
        configuration: [Debug, Release]
        rid: [linux-x64]
        os: [ubuntu-latest]
    env:
      SNAPX_VERSION: ${{ needs.setup.outputs.SNAPX_VERSION }}
      SNAPX_CI_BUILD: 1
      SNAPX_CORERUN_ALLOW_ELEVATED_CONTEXT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          lfs: true
          submodules: true

      - uses: azure/docker-login@v1
        name: Docker login github packages
        with:
          login-server: docker.pkg.github.com
          username: ${{ github.actor }} 
          password: ${{secrets.GITHUB_TOKEN }}     

      - name: Bootstrap
        shell: pwsh
        run: ./build.ps1 Bootstrap-Unix -Version ${{ env.SNAPX_VERSION }} -Configuration ${{ matrix.configuration }} -CIBuild -NetCoreAppVersion ${{ env.DOTNET_FRAMEWORK_VERSION }} -Rid ${{ matrix.rid }}
    
      - name: GTest
        timeout-minutes: 10
        shell: pwsh
        run: ./build.ps1 Run-Native-UnitTests -Version ${{ env.SNAPX_VERSION }} -Configuration ${{ matrix.configuration }} -CIBuild -NetCoreAppVersion ${{ env.DOTNET_FRAMEWORK_VERSION }} -Rid ${{ matrix.rid }}

      - name: dotnet test
        timeout-minutes: 10
        shell: pwsh
        run: ./build.ps1 Run-Dotnet-UnitTests -Version ${{ env.SNAPX_VERSION }} -Configuration ${{ matrix.configuration }} -CIBuild -NetCoreAppVersion ${{ env.DOTNET_FRAMEWORK_VERSION }} -Rid ${{ matrix.rid }}

      - name: Collect artifacts 
        env:
          SNAPX_UNIX_SETUP_ZIP_REL_DIR: build/dotnet/${{ matrix.rid }}/Snap.Installer/${{ env.DOTNET_FRAMEWORK_VERSION }}/${{ matrix.configuration }}/publish
          SNAPX_UNIX_CORERUN_REL_DIR: build/native/Unix/${{ matrix.rid }}/${{ matrix.configuration }}/Snap.CoreRun
          SNAPX_UNIX_PAL_REL_DIR: build/native/Unix/${{ matrix.rid }}/${{ matrix.configuration }}/Snap.CoreRun.Pal
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_SETUP_ZIP_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_SETUP_ZIP_REL_DIR }}/Setup-${{ matrix.rid }}.zip ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_SETUP_ZIP_REL_DIR }}/Setup-${{ matrix.rid }}.zip

          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}/corerun ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}/corerun

          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_PAL_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_PAL_REL_DIR }}/libpal.so ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_PAL_REL_DIR }}/libpal.so

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.rid }}-${{ matrix.configuration }}
          path: ${{ github.workspace }}/artifacts/**/*

  windows:
    runs-on: ${{ matrix.os }}
    name: Bootstrap ${{ matrix.os }}-${{ matrix.rid }}-${{ matrix.configuration }}
    needs: [setup]
    strategy:
      matrix:
        configuration: [Debug, Release]
        rid: [win-x86, win-x64]
        os: [windows-latest]
    env:
      SNAPX_VERSION: ${{ needs.setup.outputs.SNAPX_VERSION }}
      SNAPX_CI_BUILD: 1
      SNAPX_CORERUN_ALLOW_ELEVATED_CONTEXT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          lfs: true
          submodules: true   

      - name: Setup dotnet 2.1 sdk
        uses: actions/setup-dotnet@v1.5.0
        with:
          dotnet-version: 2.1.807
        
      - name: Setup dotnet using global.json
        uses: actions/setup-dotnet@v1.5.0

      - name: Build 
        run: ./build.ps1 Bootstrap-Windows -Version ${{ env.SNAPX_VERSION }} -Configuration ${{ matrix.configuration }} -CIBuild -NetCoreAppVersion ${{ env.DOTNET_FRAMEWORK_VERSION }} -Rid ${{ matrix.rid }}
      
      - name: GTest
        timeout-minutes: 10
        shell: pwsh
        run: ./build.ps1 Run-Native-UnitTests -Version ${{ env.SNAPX_VERSION }} -Configuration ${{ matrix.configuration }} -CIBuild -NetCoreAppVersion ${{ env.DOTNET_FRAMEWORK_VERSION }} -Rid ${{ matrix.rid }}

      - name: dotnet test
        timeout-minutes: 10
        shell: pwsh
        run: ./build.ps1 Run-Dotnet-UnitTests -Version ${{ env.SNAPX_VERSION }} -Configuration ${{ matrix.configuration }} -CIBuild -NetCoreAppVersion ${{ env.DOTNET_FRAMEWORK_VERSION }} -Rid ${{ matrix.rid }}

      - name: Collect artifacts 
        env:
          SNAPX_WINDOWS_SETUP_ZIP_REL_DIR: build/dotnet/${{ matrix.rid }}/Snap.Installer/${{ env.DOTNET_FRAMEWORK_VERSION }}/${{ matrix.configuration }}/publish
          SNAPX_WINDOWS_CORERUN_REL_DIR: build/native/Windows/${{ matrix.rid }}/${{ matrix.configuration }}/Snap.CoreRun/${{ matrix.configuration }}
          SNAPX_WINDOWS_PAL_REL_DIR: build/native/Windows/${{ matrix.rid }}/${{ matrix.configuration }}/Snap.CoreRun.Pal/${{ matrix.configuration }}
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_SETUP_ZIP_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_WINDOWS_SETUP_ZIP_REL_DIR }}/Setup-${{ matrix.rid }}.zip ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_SETUP_ZIP_REL_DIR }}/Setup-${{ matrix.rid }}.zip

          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_CORERUN_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_WINDOWS_CORERUN_REL_DIR }}/corerun.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_CORERUN_REL_DIR }}/corerun.exe

          mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_PAL_REL_DIR }}
          cp ${{ github.workspace }}/${{ env.SNAPX_WINDOWS_PAL_REL_DIR }}/pal.dll ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_PAL_REL_DIR }}/pal.dll

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.rid }}-${{ matrix.configuration }}
          path: ${{ github.workspace }}/artifacts/**/*

  publish:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    # Must run on Windows in order to support .NET Full Framework.
    runs-on: windows-latest
    name: Publish
    needs: [setup, windows, linux]
    env:
      SNAPX_VERSION: ${{ needs.setup.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with: 
          lfs: true

      - name: Download ubuntu-latest-linux-x64-Release artifacts
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-linux-x64-Release
          path: ${{ github.workspace }}
          
      - name: Download windows-2019-win-x86-Release artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-2019-win-x86-Release
          path: ${{ github.workspace }}

      - name: Download windows-2019-win-x64-Release artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-2019-win-x64-Release
          path: ${{ github.workspace }}
          
      - name: Setup dotnet using global.json
        uses: actions/setup-dotnet@v1.5.0
    
      - name: Build nupkgs
        shell: pwsh
        run: ./build.ps1 -Target Snapx -CIBuild -Version ${{ env.SNAPX_VERSION }} -Configuration Release
           
      - name: Push nuget packages
        shell: pwsh
        run: |
          $nupkgs = Get-ChildItem ".\${{ env.GITHUB_WORKSPACE }}\nupkgs" -Filter *.nupkg | Select-Object -ExpandProperty FullName
          
          $nupkgs | ForEach-Object {
            dotnet nuget push $_ --source nuget.org --api-key ${{ secrets.PETERSUNDE_NUGET_ORG_API_KEY }}       
            if($LASTEXITCODE -ne 0) 
            {
              Write-Error "Error uploading nupkg: $_"
            }
          }

      - name: Create github release tag
        if: github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.SNAPX_VERSION }}
          release_name: Release v${{ env.SNAPX_VERSION }}
          draft: true
          prerelease: false
