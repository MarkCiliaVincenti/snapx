name: snapx

on: push

env:
  GPR_VERSION: 0.1.125
  GITVERSION_VERSION: 5.3.4
  MSMVS_TOOLSET_VERSION: 16
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  FINTER_NUGET_FEED: https://nuget.pkg.github.com/fintermobilityas/index.json        

jobs:

  setup:    
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      SNAPX_VERSION: ${{ steps.set-version.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
        
      - id: set-version
        name: Setup GitVersion and set build version
        shell: pwsh
        run: |
          dotnet tool update GitVersion.Tool --global --version ${{ env.GITVERSION_VERSION }}
          $SNAPX_VERSION = (dotnet gitversion /showVariable NugetVersionv2) | out-string
          echo "::set-env name=SNAPX_VERSION::$SNAPX_VERSION"
          echo "::set-output name=SNAPX_VERSION::$SNAPX_VERSION"
            
  build:
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.os }} (${{ matrix.configuration }})
    needs: [setup]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        configuration: [Debug, Release]
    env:
      SNAPX_VERSION: ${{ needs.setup.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
          lfs: true
          submodules: true

      - uses: azure/docker-login@v1
        name: Docker login github packages
        with:
          login-server: docker.pkg.github.com
          username: ${{ github.actor }} 
          password:  ${{secrets.GITHUB_TOKEN }}     

      - name: Setup dotnet using global.json
        if: matrix.os == 'windows-latest'
        uses: actions/setup-dotnet@v1.5.0

      - name: Build and test
        timeout-minutes: 10
        shell: pwsh
        run: |
          $matrix_os = "${{ matrix.os}}";
          $target = $null;

          switch($matrix_os)
          {
            "ubuntu_latest" {
              $target = "Bootstrap-Unix";
            }
            "windows-latest" {
              $target = "Bootstrap-Windows";
            }
            default {
              Write-Error "Unsupported os: $matrix_os"
            }
          }
          
          ./build.ps1 $target -CIBuild -Version ${{ env.SNAPX_VERSION }} -Configuration ${{ matrix.configuration }}
    
      - name: Collect artifacts 
        env:
          SNAPX_WINDOWS_SETUP_ZIP_REL_DIR: build/dotnet/win-x64/Snap.Installer/netcoreapp3.1/Release/publish
          SNAPX_WINDOWS_CORERUN_REL_DIR: build/native/Windows/win-msvs-${{ env.MSMVS_TOOLSET_VERSION }}-x64/${{ matrix.configuration }}/Snap.CoreRun/${{ matrix.configuration }}
          SNAPX_WINDOWS_PAL_REL_DIR: build/native/Windows/win-msvs-${{ env.MSMVS_TOOLSET_VERSION }}-x64/${{ matrix.configuration }}/Snap.CoreRun.Pal/${{ matrix.configuration }}
          SNAPX_UNIX_SETUP_ZIP_REL_DIR: build/dotnet/linux-x64/Snap.Installer/netcoreapp3.1/Release/publish
          SNAPX_UNIX_CORERUN_REL_DIR: build/native/Unix/x86_64-linux-gcc/Release/Snap.CoreRun
          SNAPX_UNIX_PAL_REL_DIR: build/native/Unix/x86_64-linux-gcc/Release/Snap.CoreRun.Pal
          SNAPX_MINGW_CORERUN_REL_DIR: build/native/Unix/x86_64-w64-mingw32-gcc/Release/Snap.CoreRun
          SNAPX_MINGW_PAL_REL_DIR: build/native/Unix/x86_64-w64-mingw32-gcc/Release/Snap.CoreRun.Pal
          SNAPX_MINGW_TESTS_REL_DIR: build/native/Unix/x86_64-w64-mingw32-gcc/Release/Snap.CoreRun.Tests
        run: |
          $matrix_os = "${{ matrix.os }}";
          $matrix_configuration = "${{ matrix.configuration }}";
          
          switch($matrix_os) {
            "windows-latest" {
              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_SETUP_ZIP_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_WINDOWS_SETUP_ZIP_REL_DIR }}/Setup-win-x64.zip ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_SETUP_ZIP_REL_DIR }}/Setup-win-x64.zip

              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_CORERUN_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_WINDOWS_CORERUN_REL_DIR }}/corerun.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_CORERUN_REL_DIR }}/corerun.exe

              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_WINDOWS_PAL_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_WINDOWS_PAL_REL_DIR }}/pal.dll ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_PAL_REL_DIR }}/pal.dll
            }
            "ubuntu-latest" {   
              if($matrix_configuration -ne "Release") {
                return;
              }
              
              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_SETUP_ZIP_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_SETUP_ZIP_REL_DIR }}/Setup-linux-x64.zip ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_SETUP_ZIP_REL_DIR }}/Setup-linux-x64.zip

              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}/corerun ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_CORERUN_REL_DIR }}/corerun

              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_PAL_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_UNIX_PAL_REL_DIR }}/libpal.so ${{ github.workspace }}/artifacts/${{ env.SNAPX_UNIX_PAL_REL_DIR }}/libpal.so

              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_CORERUN_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_CORERUN_REL_DIR }}/corerun.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_CORERUN_REL_DIR }}/corerun.exe

              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_PAL_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_PAL_REL_DIR }}/libpal.dll ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_PAL_REL_DIR }}/libpal.dll

              mkdir -p ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}
              cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun.exe
              cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun_demoapp.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun_demoapp.exe
              cp ${{ github.workspace }}/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun_tests.exe ${{ github.workspace }}/artifacts/${{ env.SNAPX_MINGW_TESTS_REL_DIR }}/corerun_tests.exe
            }
            default {
               Write-Error "Unsupported os: $matrix_os" 
            }
          }
          
      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.configuration }}
          path: ${{ github.workspace }}/artifacts/**/*
          
  publish:
    runs-on: windows-latest
    name: Publish
    needs: [setup, build]
    env:
      SNAPX_VERSION: ${{ needs.setup.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0

      - name: Download linux-latest-Release artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux-latest-Release
          path: ${{ github.workspace }}
          
      - name: Download windows-latest-Debug artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-Debug
          path: ${{ github.workspace }}

      - name: Download windows-latest-Release artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-Release
          path: ${{ github.workspace }}
          
      - name: Setup dotnet using global.json
        uses: actions/setup-dotnet@v1.5.0
    
      - name: Setup gpr v${{ env.GPR_VERSION }} 
        shell: pwsh
        run: dotnet tool update gpr --global --version ${{ env.GPR_VERSION }}

      - name: Run windows native tests
        run: ./build.ps1 Run-Native-UnitTests -CIBuild -Version ${{ env.SNAPX_VERSION }}

      - name: Build snapx
        run: ./build.ps1 Snapx -CIBuild -Version ${{ env.SNAPX_VERSION }}
           
      - name: Push nuget packages
        run: | 
          gpr push ${{ github.workspace }}/nupkgs/snapx.${{ env.SNAPX_VERSION }}.nupkg --api-key ${{ secrets.FINTER_NUGET_GITHUB_PACKAGES_TOKEN }}
          gpr push ${{ github.workspace }}/nupkgs/Snapx.Core.${{ env.SNAPX_VERSION }}.nupkg --api-key ${{ secrets.FINTER_NUGET_GITHUB_PACKAGES_TOKEN }}

      - name: Create github release tag
        if: github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.SNAPX_VERSION }}
          release_name: Release v${{ env.SNAPX_VERSION }}
          draft: true
          prerelease: false
